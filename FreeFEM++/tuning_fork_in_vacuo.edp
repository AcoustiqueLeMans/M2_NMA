//   Program tuning_fork.edp
//
//   Copyright (C) 2014 LAUM UMR CNRS 6613 (France)
// 	   Olivier DAZEL <olivier.dazel@univ-lemans.fr>
//     Antonin TRIBALEAU <antonin.tribaleau@univ-lemans.fr>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//
// This program computes the vibroacoustic response of atuning fork. 
// It is a part of the course
// "Numerical Methods in Acoustics and Vibration"
//  given for students of the MSc Master Program in Acoustics and
//  IMDEA students



// Frequency vector
int nbfrq = 100;
real fmin = 100, fmax = 600;

real normu ;
string namefile;


// Property of the tuning fork (Steel)
real  rhoS = 7800.,
      E = 200e9,
      nu = 0.2,
      lambda = (nu*E)/((1+nu)*(1-2*nu)),
      mu = E / (2*(1+nu));

complex eta = 1. + 0.01*1i;      

real nbe = 300; // 

// Dimension of the tuning fork
real  l1 = 0.08, // Length of the branches
      l2 = 0.03, // length of the foot
      d =  0.0045, // thickness of the branch
      r1 = 0.0045, // Internal radius.
      r2 = r1+d; // External radius.

border aa(t=0,1){ x=0 ; y=l2*t ; label=1;}
border bb(t=-pi/2,-pi){ x=r2*cos(t) ; y=r2*sin(t) + l2+r2; label=1;}
border cc(t=0,1){ x=-r2 ; y=l1*t+l2+r2 ; label=1;}
border dd(t=0,1){ x=d*t-r2 ; y=l1+l2+r2 ; label=1;}
border ee(t=1,0){ x=-(r2-r1) ; y=l1*t+l2+r2 ; label=1;}
border ff(t=-pi,-pi/2){ x=r1*cos(t) ; y=r1*sin(t) + l2+r2; label=1;}
border gg(t=0,1){ x=d*t ; y=l2+r2-r1 ; label=1;}
border hh(t=-pi/2,0){ x=r1*cos(t)+d ; y=r1*sin(t) + l2+r2; label=1;}
border ii(t=0,1){ x=d+r1 ; y=l1*t+l2+r2 ; label=1;}
border jj(t=0,1){ x=d*t+d+r1 ; y=l1+l2+r2 ; label=10;} // Excitation
border kk(t=1,0){ x=2*d+r1 ; y=l1*t+l2+r2 ; label=1;}
border ll(t=0,-pi/2){ x=r2*cos(t)+d ; y=r2*sin(t) + l2+r2; label=1;}
border mm(t=1,0){ x=d ; y=l2*t ; label=1;}
border nn(t=1,0){ x=d*t ; y=0. ; label=20;} // Clamped edge
                  

mesh ThS = buildmesh(aa(-ceil(nbe*l2))+bb(-ceil(nbe*0.5*pi*r2))+cc(-ceil(nbe*l1))+dd(-ceil(nbe*d))+ee(-ceil(nbe*l1))+ff(-ceil(nbe*0.5*pi*r1))+gg(-ceil(nbe*d))+hh(-ceil(nbe*0.5*pi*r1))+ii(-ceil(nbe*l1))+jj(-ceil(nbe*d))+kk(-ceil(nbe*l1))+ll(-ceil(nbe*0.5*pi*r2))+mm(-ceil(nbe*l2))+nn(-ceil(nbe*d)),fixeborder=true);//f1(10),f2(10),f3(10),f4(10)
                     
//plot(ThS,wait=true);

// Macro

macro e(ux,uy) [dx(ux),dy(uy),(dy(ux)+dx(uy)) ] //
macro Hooke [ [ lambda+2*mu , lambda , 0],
          [ lambda , lambda+2*mu , 0],
          [ 0 , 0 , mu ]] //
// Finite-Element discretization spaces
fespace VhS(ThS,[P2,P2]);
VhS [ux,uy],[uxtest,uytest];

fespace VhSs(ThS,P2);
VhSs<complex> ux1,uy2;
VhSs<complex> u;


// /*

ofstream res("normu2_invacuo.txt");

real[int] freq(nbfrq);
{

for(int ii=0; ii<nbfrq; ii++){
    freq(ii) = fmin+(ii*((fmax-fmin)/(nbfrq-1)));
}
}

for(int ii=0; ii<nbfrq; ii++){// frequency in Hz 
  cout << "Progress=" << 100*ii/nbfrq << "%" << endl;		
  real omega = 2.*pi*freq(ii); // pulsation

  // Weak form of the solid phase
  
    varf km([ux,uy],[uxtest,uytest]) =	int2d(ThS)(((Hooke*e(ux,uy))'*e(uxtest,uytest))*eta) 
					                    - int2d(ThS)((omega^2.)*rhoS*(ux*uxtest+uy*uytest)) 
                    				  	+ on(20,ux=0.,uy=0.); // Encastrement;
    
  // Weak form of the force

  varf force([ux,uy],[uxtest,uytest]) =	int1d(ThS,10)( freq(ii)*uxtest); // force along x

  matrix<complex> KM =	km(VhS,VhS);
 
  matrix<complex> M = KM;
  set(M,solver=sparsesolver);

  complex[int] Fint = force(0,VhS); 
  complex[int] F( VhS.ndof) ; F = 0; for(int n=0; n<Fint.n; n++){F[n] = Fint(n);}; 

  complex[int] UP( VhS.ndof ); UP = 0.; // Solution vector
  UP = M^-1*F;

  for(int n=0; n<VhSs.ndof/2; n++){ 
	ux1[](n) = UP[2*n];
	uy2[](n) = UP[2*n+1];
  }
	   
  normu = int2d(ThS)(abs(ux1)^2.0)+int2d(ThS)(abs(uy2)^2.0);

  res << freq(ii) <<"\t" << normu << "\n";
  
}


varf varmm([ux,uy],[uxtest,uytest]) =	 int2d(ThS)(rhoS*(ux*uxtest+uy*uytest)) + on(20,ux=0.,uy=0.); 

varf varkk([ux,uy],[uxtest,uytest]) =	int2d(ThS)((Hooke*e(ux,uy))'*e(uxtest,uytest)) + on(20,ux=0.,uy=0.); 

matrix KK =	varkk(VhS,VhS,solver=Crout,factorize=1,eps=1e-20);
matrix MM =	varmm(VhS,VhS,solver=CG,eps=1e-20);

int nev=25; 
real[int] ev(nev);
VhS[int] [eV,eW](nev);

int k=EigenValue(KK,MM,sym=true,sigma=0,value=ev,vector=eV,tol=1e-10,maxit=0,ncv=0);
k = min(k,nev);

// Display
for (int ii=0;ii<nev;ii++){
	if (sqrt(ev[ii])/(2*pi) > 1){
		cout << "Mode " << ii << " - " << sqrt(ev[ii])/(2*pi) << " Hz" << endl;

		[ux,uy]=[eV[ii],eW[ii]];
		real coef = 0.005/abs(ux[].linfty);
		mesh Thm = movemesh(ThS, [x+real(ux)*coef,y+real(uy)*coef]);
		plot(Thm, cmm = "Mode "+ii+" - freq = "+ sqrt(ev[ii])/(2*pi) +"Hz",wait=true);
	}
}
//*/
