//   Program tuning_fork.edp
//
//   Copyright (C) 2014 LAUM UMR CNRS 6613 (France)
// 	   Olivier DAZEL <olivier.dazel@univ-lemans.fr>
//     Antonin TRIBALEAU <antonin.tribaleau@univ-lemans.fr>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//
// This program computes the vibroacoustic response of atuning fork. 
// It is a part of the course
// "Numerical Methods in Acoustics and Vibration"
//  given for students of the MSc Master Program in Acoustics and
//  IMDEA students




// Frequency vector
int nbfrq = 100;
real fmin = 100, fmax = 600;

// Property of the fluid
real  rhof = 1.2, cel = 344;

// Property of the tuning fork (Steel)
real  rhoS = 7800.,
      E = 200e9,
      nu = 0.2,
      lambda = (nu*E)/((1+nu)*(1-2*nu)),
      mu = E / (2*(1+nu));

complex eta = 1. + 0.01*1i;      

real nbe = 200; // 
real nbeF = 50; // 

real normu,normp ;

// Dimension of the tuning fork
real  l1 = 0.08, // Length of the branches
      l2 = 0.03, // length of the foot
      d =  0.0045, // thickness of the branch
      r1 = 0.0045, // Internal radius.
      r2 = r1+d; // External radius.

                        
// reg10 : elastic structure
// reg20 : acoustic medium
// reg21 : PML with tau_x
// reg22 : PML with tau_y
// reg22 : PML with tau_x and tau_x
                        
                        
real lx = .4, ly = .4; // Dimension of the air cavity

border aa(t=0,1){ x=0 ; y=l2*t ; label=1;}
border bb(t=-pi/2,-pi){ x=r2*cos(t) ; y=r2*sin(t) + l2+r2; label=1;}
border cc(t=0,1){ x=-r2 ; y=l1*t+l2+r2 ; label=1;}
border dd(t=0,1){ x=d*t-r2 ; y=l1+l2+r2 ; label=1;}
border ee(t=1,0){ x=-(r2-r1) ; y=l1*t+l2+r2 ; label=1;}
border ff(t=-pi,-pi/2){ x=r1*cos(t) ; y=r1*sin(t) + l2+r2; label=1;}
border gg(t=0,1){ x=d*t ; y=l2+r2-r1 ; label=1;}
border hh(t=-pi/2,0){ x=r1*cos(t)+d ; y=r1*sin(t) + l2+r2; label=1;}
border ii(t=0,1){ x=d+r1 ; y=l1*t+l2+r2 ; label=1;}
border jj(t=0,1){ x=d*t+d+r1 ; y=l1+l2+r2 ; label=10;} // Force exc.
border kk(t=1,0){ x=2*d+r1 ; y=l1*t+l2+r2 ; label=1;}
border ll(t=0,-pi/2){ x=r2*cos(t)+d ; y=r2*sin(t) + l2+r2; label=1;}
border mm(t=1,0){ x=d ; y=l2*t ; label=1;}
border nn(t=1,0){ x=d*t ; y=0. ; label=20;} // Encastrement


// Maillage fenêtre fluide
real xc = d/2., yc = l2+d/2.; // Centre de la fenêtre fluide
border f1(t=0,1){ x=lx/2.+xc-(lx*t)  ; y=-ly/2.+yc ; label=0;}
border f2(t=0,1){ x=-lx/2.+xc  ; y=-ly/2.+yc + ly*t ; label=0;}
border f3(t=1,0){ x=lx/2.+xc-(lx*t)  ; y=+ly/2.+yc ; label=0;}
border f4(t=0,1){ x=+lx/2.+xc  ; y=ly/2.+yc - ly*t ; label=0;}


mesh ThS = buildmesh(aa(-ceil(nbe*l2))+bb(-ceil(nbe*0.5*pi*r2))+cc(-ceil(nbe*l1))+dd(-ceil(nbe*d))+ee(-ceil(nbe*l1))+ff(-ceil(nbe*0.5*pi*r1))+gg(-ceil(nbe*d))+hh(-ceil(nbe*0.5*pi*r1))+ii(-ceil(nbe*l1))+jj(-ceil(nbe*d))+kk(-ceil(nbe*l1))+ll(-ceil(nbe*0.5*pi*r2))+mm(-ceil(nbe*l2))+nn(-ceil(nbe*d)),fixeborder=true);//f1(10),f2(10),f3(10),f4(10)
         
                      
mesh ThF = buildmesh(aa(ceil(nbe*l2))+bb(ceil(nbe*0.5*pi*r2))+cc(ceil(nbe*l1))+dd(ceil(nbe*d))+ee(ceil(nbe*l1))+ff(ceil(nbe*0.5*pi*r1))+gg(ceil(nbe*d))+hh(ceil(nbe*0.5*pi*r1))+ii(ceil(nbe*l1))+jj(ceil(nbe*d))+kk(ceil(nbe*l1))+ll(ceil(nbe*0.5*pi*r2))+mm(ceil(nbe*l2))+nn(ceil(nbe*d))+f1(-ceil(nbeF*lx))+f2(-ceil(nbeF*ly))+f3(-ceil(nbeF*lx))+f4(-ceil(nbeF*ly)),fixeborder=true);
      

                  
//plot(ThF,ThS,wait=true);

// Macro
macro grad(p) [dx(p),dy(p)] //
macro e(u1,u2) [dx(u1),dy(u2),(dy(u1)+dx(u2)) ] //
macro CISO [ [ lambda+2*mu , lambda , 0],
          [ lambda , lambda+2*mu , 0],
          [ 0 , 0 , mu ]] //
// Espace EF
fespace VhS(ThS,[P2,P2]);
fespace VhSs(ThS,P2);
VhSs<complex> u1,u2;
VhSs<complex> ux,uy;

fespace VhF(ThF,P2);
VhF<complex> p;
VhF pp;

fespace VhFw(ThF,P2);
VhFw ppw;

fespace Vh0(ThF,P0);

plot(ThF,ThS,wait=true);

real[int] freq(nbfrq);
{

for(int ii=0; ii<nbfrq; ii++){
    freq(ii) = fmin+(ii*((fmax-fmin)/(nbfrq-1)));
}
}

ofstream res("normu2_FSI.txt");


for(int ii=0; ii<nbfrq; ii++){// frequency in Hz 
  cout << "Progress=" << 100*ii/nbfrq << "%" << endl;		
  real omega = 2.*pi*freq(ii); // pulsation

  // Weak form of the solid phase
  varf km([u1,u2],[uk1,uk2]) =	int2d(ThS)(((CISO*e(u1,u2))'*e(uk1,uk2))*eta) // K ok
					                    - int2d(ThS)((omega^2.)*rhoS*(u1*uk1+u2*uk2)) // M ok
                    				  	+ on(20,u1=0.,u2=0.); // Encastrement;
  // Weak form of the force

  varf force([u1,u2],[uk1,uk2]) =	int1d(ThS,10)(freq(ii)*uk1); // force along x

  varf hq(p,pk) =             int2d(ThF)(grad(p)'*grad(pk)/rhof/(omega^2.)) //H
                            - int2d(ThF)((p*pk)/(rhof*(cel^2))); // Q
                          
  varf c([p],[uk1,uk2]) = - int1d(ThF,1,10,20)(p*N.x*uk1 + p*N.y*uk2);

  matrix<complex> KM =	km(VhS,VhS);
  matrix<complex> HQ =	hq(VhF,VhF);

  matrix<complex> C =	c(VhF,VhS);
  matrix<complex> CT = -C';

  matrix<complex> M = [[  KM,	  C	],
					            [   CT,		HQ ]];
  set(M,solver=sparsesolver);

  complex[int] Fint = force(0,VhS); 
  complex[int] F( VhS.ndof + VhF.ndof ) ; F = 0; for(int n=0; n<Fint.n; n++){F[n] = Fint(n);}; 

  complex[int] UP( VhS.ndof + VhF.ndof ); UP = 0.; // Solution vector
  UP = M^-1*F;

  for(int n=0; n<VhS.ndof/2; n++){ 
    ux[](n) = UP[2*n];
	uy[](n) = UP[2*n+1];
  }
	   
  for(int n=0; n<VhF.ndof; n++){
	  p[](n) = UP[VhS.ndof + n];
  }


  ppw = abs(p);
  plot(ppw,ThS,fill=true,nbiso=20,value=true,wait=false);

  normu = int2d(ThS)(abs(ux)^2.0)+int2d(ThS)(abs(uy)^2.0);
  normp = int2d(ThF)(abs(p)^2.0);

  res << freq(ii) <<"\t" << normu <<"\t" << normp << "\n";


}

